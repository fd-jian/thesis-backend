version: "3"
services:

  mosquitto:
    image: eclipse-mosquitto 
    volumes:
      - /mosquitto/data
      - /mosquitto/log
      - ./mosquitto/config:/mosquitto/config:ro
      - ./mosquitto/passwd:/mosquitto/passwd:ro
      - ${CERTS_DIR:-./certs/default}:/etc/mosquitto/certs:ro
    ports:
      - "8883:8883"

  mosquitto-exporter:
    image: mosquitto-exporter
    build: ./src/mosquitto-exporter
    ports:
      - "9234:9234"
    volumes:
      - ${CERTS_DIR:-./certs/default}:/etc/certs:ro
    environment:
      BROKER_ENDPOINT: tls://mosquitto:8883
      MQTT_USER: user
      MQTT_PASS: changeme
      MQTT_CACERT: /etc/certs/ca.crt

  # Can be used to monitor mqtt messages. Also provides pub and sub MQTT client capabilities using `docker-compose exec mqtt-client <COMMAND>`.
  mqtt-client:
    image: efrecon/mqtt-client
    command: sh -c 'sub -h mosquitto -p 8883 -u ${MQTT_SERVER_USERNAME} -P ${MQTT_SERVER_PASSWORD} --cafile /opt/certs/ca.crt -t "#" -v'
    environment:
      MQTT_SERVER_USERNAME: ${MQTT_SERVER_USERNAME}
      MQTT_SERVER_PASSWORD: ${MQTT_SERVER_PASSWORD}
    volumes:
      - ${CERTS_DIR:-./certs/default}/ca.crt:/opt/certs/ca.crt:ro
    depends_on:
      - mosquitto

  proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./proxy/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./proxy/conf/conf.d:/etc/nginx/conf.d:ro
      - ./proxy/html:/usr/share/nginx/html
      - ./certs/default/server.crt:/etc/ssl/certs/server.crt:ro
      - ./certs/default/server.key:/etc/ssl/private/server.key:ro
    depends_on:
      - indicator-service
      - indicator-ui

  indicator-ui:
    image: nginx:alpine
    volumes:
      - ./src/indicator-ui/src:/usr/share/nginx/html/visual:ro
      - ./indicator-ui/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./indicator-ui/conf/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "127.0.0.1:10080:80"

  indicator-service:
    image: indicator-service
    build: ./src/indicator-service
    depends_on:
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: snapshot
      TZ: "Europe/Berlin"
      USERNAME: ${INDICATOR_SERVICE_USERNAME}
      # bcrypt hashed pw, e.g. with python using bcrypt package: bcrypt.hashpw("passw".encode('utf-8'), bcrypt.gensalt(rounds=10))
      # TODO: use cleartext password since it can be provided through docker environment variables.
      PASSWORD: ${INDICATOR_SERVICE_BCRYPT_PW}
      #_JAVA_OPTIONS: -Dlogging.level.org.springframework=DEBUG?
    ports:
      - "127.0.0.1:18080:8080"

  activity-detector:
    image: activity-detector
    build: ./src/activity-detector
    depends_on:
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: snapshot
      TZ: "Europe/Berlin"
      #_JAVA_OPTIONS: -Dlogging.level.org.springframework=DEBUG?

  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.1
    hostname: zookeeper
    ports:
      - "127.0.0.1:2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      #KAFKA_JMX_PORT: 49999
      #KAFKA_JMX_HOSTNAME: localhost
      #KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote.local.only=false
      #-Dcom.sun.management.jmxremote.authenticate=false
      #-Dcom.sun.management.jmxremote.rmi.port=49999
      #-Dcom.sun.management.jmxremote.port=49999
      #-Dcom.sun.management.jmxremote.ssl=false"
      TZ: "Europe/Berlin"
    #volumes:
      #- ./zookeeper/data:/var/lib/zookeeper/data
      #- ./zookeeper/log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    ports:
      - "127.0.0.1:9092:9092"
      - "127.0.0.1:29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      #KAFKA_JMX_PORT: 49999
      #KAFKA_JMX_HOSTNAME: localhost
      #KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote.local.only=false
      #-Dcom.sun.management.jmxremote.authenticate=false
      #-Dcom.sun.management.jmxremote.rmi.port=49999
      #-Dcom.sun.management.jmxremote.port=49999
      #-Dcom.sun.management.jmxremote.ssl=false"
      TZ: "Europe/Berlin"
#    volumes:
#      - ./kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "127.0.0.1:8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  kafka-connect:
    image: kafka-connect-prometheus
    build: ./src/kafka-connect-prometheus
    hostname: kafka-connect
    ports:
      - "127.0.0.1:28083:28083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_PORT: 28083
      CONNECT_GROUP_ID: "engagement-detection"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_OPTS: -javaagent:/usr/app/jmx_prometheus_javaagent.jar=7071:/usr/app/prom-jmx-agent-config.yml
      #KAFKA_JMX_PORT: 49999
      #KAFKA_JMX_HOSTNAME: localhost
      #KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote.local.only=false
      #-Dcom.sun.management.jmxremote.authenticate=false
      #-Dcom.sun.management.jmxremote.rmi.port=49999
      #-Dcom.sun.management.jmxremote.port=49999
      #-Dcom.sun.management.jmxremote.ssl=false"
      TZ: "Europe/Berlin"
    volumes:
      - kafka-plugins:/usr/share/java/kafka-extra
      - ${CERTS_DIR:-./certs/default}/ca.crt:/etc/kafka/certs/ca.crt:ro
    depends_on:
      - kafka
      - kafka-connect-mqtt-lib
    links:
      # hack to make thriller url work in development
      - mosquitto:thriller.edutec.science

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/conf:/etc/prometheus

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana

  # copies contained connect jars from build to kafka-plugin volume and shuts down
  kafka-connect-mqtt-lib:
    image: kafka-connect-mqtt-lib
    build: ./src/kafka-connect-mqtt
    volumes:
      - kafka-plugins:/jars

  # creates connectors on kafka-connect via REST API calls and shuts down
  connector-creator: 
    image: connector-creator
    build: ./src/connector-creator
    environment:
      CONNECT_HOST: kafka-connect
      CONNECT_PORT: 28083
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on: 
      - kafka-connect
    volumes:
      - ./kafka/connect-mqtt/connectors:/data/connectors:ro
      - ./kafka/connect-mqtt/auto-schemas:/data/auto-schemas:ro

  redis:
    image: redis:latest
    command: redis-server
    ports:
      - "127.0.0.1:6379:6379"
      - "127.0.0.1:6380:6380"

  web:
    build: ./src/experience-sampling-service-backend
    command: python manage.py runserver 0.0.0.0:8002
    ports:
      - "127.0.0.1:18002:8002"
#  worker_channels:
#
#    build: ./src/experience-sampling-service-backend/experiencesampling
#    command: python manage.py runworker channels
#    volumes:
#      - .:/code
#    links:
#      - redis

  channels:
    build: ./src/experience-sampling-service-backend
    command: daphne -p 8001 experiencesampling.asgi:application
    ports:
      - "127.0.0.1:18001:8001"
    links:
     - redis

volumes:
  kafka-plugins:
  grafana-storage:
